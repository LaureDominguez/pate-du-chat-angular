import { Injectable } from '@angular/core';
import { HttpClient, HttpErrorResponse } from '@angular/common/http';
import { BehaviorSubject, catchError, Observable, tap, throwError } from 'rxjs';

import { Category } from '../models/category';

@Injectable({
  providedIn: 'root',
})
export class CategoryService {
  private apiUrl = 'http://localhost:5000/api/categories';
  private categoriesSubject = new BehaviorSubject<Category[]>([]);
  categories$ = this.categoriesSubject.asObservable(); // Observable √©coutable

  constructor(private http: HttpClient) {
    this.loadCategories(); // Charger les cat√©gories au d√©marrage
  }

  // Charge les cat√©gories et met √† jour le BehaviorSubject
  private loadCategories(): void {
    this.http.get<Category[]>(this.apiUrl).subscribe((categories) => {
      this.categoriesSubject.next(categories); // Met √† jour les abonn√©s
    });
  }

  // R√©cup√©rer toutes les cat√©gories
  getCategories(): Observable<Category[]> {
    return this.categories$;
  }

  // R√©cup√©rer une cat√©gorie par son ID
  getCategoryById(id: string): Observable<Category> {
    const url = `${this.apiUrl}/${id}`;
    return this.http.get<Category>(url);
  }

  // Cr√©er une nouvelle cat√©gorie
  createCategory(payload: any): Observable<Category> {
    console.log('üîç Donn√©es envoy√©es au serveur :', payload);
    return this.http.post<Category>(this.apiUrl, payload).pipe(
      catchError(this.handleError),
      tap(() => this.loadCategories()) // Met √† jour apr√®s cr√©ation
    );
  }

  // Mettre √† jour une cat√©gorie existante
  updateCategory(id: string, payload: any): Observable<Category> {
    const url = `${this.apiUrl}/${id}`;
    return this.http.put<Category>(url, payload).pipe(
      catchError(this.handleError),
      tap(() => this.loadCategories()) // Met √† jour apr√®s modification
    );
  }

  // Supprimer une cat√©gorie
  deleteCategory(id: string): Observable<{ message: string }> {
    const url = `${this.apiUrl}/${id}`;
    return this.http.delete<{ message: string }>(url).pipe(
      catchError(this.handleError),
      tap(() => this.loadCategories()) // Met √† jour apr√®s suppression
    );
  }

  private handleError(error: HttpErrorResponse) {
    let errorMessage = 'Une erreur inconnue est survenue.';

    if (error.status === 400) {
      if (error.error.errors) {
        // Express Validator envoie un tableau d'erreurs ‚Üí on concat√®ne les messages
        errorMessage = error.error.errors
          .map((err: any) => err.msg)
          .join('<br>');
      } else if (error.error.msg) {
        // Cas d'une erreur unique (ex: "Cet ingr√©dient existe d√©j√†.")
        errorMessage = error.error.msg;
      } else {
        errorMessage = 'Requ√™te invalide. V√©rifiez vos champs.';
      }
    } else if (error.status === 404) {
      errorMessage = error.error.msg || 'Erreur 404 : Ressource introuvable.';
    } else if (error.status === 500) {
      errorMessage = 'Erreur serveur. Veuillez r√©essayer plus tard.';
    }

    return throwError(() => new Error(errorMessage));
  }
}

export { Category };
